#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');
const srcDir = path.join(rootDir, 'src');
const distDir = path.join(rootDir, 'dist');
const componentsDir = path.join(distDir, 'components');

// Clean dist directory
function cleanDist() {
  console.log('üßπ Cleaning dist directory...');
  if (fs.existsSync(distDir)) {
    fs.rmSync(distDir, { recursive: true, force: true });
  }
  fs.mkdirSync(distDir, { recursive: true });
  fs.mkdirSync(componentsDir, { recursive: true });
}

// Get all SVG files from src directory
function getSvgFiles() {
  if (!fs.existsSync(srcDir)) {
    console.error('‚ùå src directory not found');
    process.exit(1);
  }
  
  const files = fs.readdirSync(srcDir)
    .filter(file => file.endsWith('.svg'))
    .map(file => path.join(srcDir, file));
  
  console.log(`üìÅ Found ${files.length} SVG files:`, files.map(f => path.basename(f)));
  return files;
}

// Convert SVG files to React components using SVGR
function convertSvgFiles(svgFiles) {
  console.log('üîÑ Converting SVG files to React components...');
  
  try {
    // Use SVGR CLI to convert all SVG files - properly quote paths with spaces
    const svgrCommand = `npx @svgr/cli --config-file .svgrrc.cjs --out-dir "${componentsDir}" -- "${srcDir}"`;
    console.log(`Running: ${svgrCommand}`);
    
    execSync(svgrCommand, { 
      cwd: rootDir,
      stdio: 'inherit'
    });
    
    console.log('‚úÖ SVG conversion completed');
  } catch (error) {
    console.error('‚ùå SVG conversion failed:', error.message);
    process.exit(1);
  }
}

// Generate index.ts file with barrel exports
function generateIndexFile() {
  console.log('üìù Generating index.ts...');
  
  const componentFiles = fs.readdirSync(componentsDir)
    .filter(file => file.endsWith('.tsx'))
    .map(file => path.basename(file, '.tsx'));
  
  const exports = componentFiles
    .map(name => `export { default as ${name} } from './components/${name}.js';`)
    .join('\n');
  
  const indexContent = `// Auto-generated barrel exports
// This file is automatically generated. Do not edit manually.

${exports}

// Re-export types
export type { IconProps } from './components/${componentFiles[0] || 'AssigneeIcon'}.js';
`;
  
  fs.writeFileSync(path.join(distDir, 'index.ts'), indexContent);
  console.log(`‚úÖ Generated index.ts with ${componentFiles.length} exports`);
}

// Generate TypeScript declaration file
function generateTypes() {
  console.log('üìù Generating TypeScript declarations...');
  
  try {
    execSync('npx tsc', { 
      cwd: rootDir,
      stdio: 'inherit'
    });
    console.log('‚úÖ TypeScript compilation completed');
  } catch (error) {
    console.error('‚ùå TypeScript compilation failed:', error.message);
    process.exit(1);
  }
}

// Main build function
async function build() {
  console.log('üöÄ Building @pd/icons package...\n');
  
  const startTime = Date.now();
  
  try {
    // Step 1: Clean
    cleanDist();
    
    // Step 2: Get SVG files
    const svgFiles = getSvgFiles();
    
    if (svgFiles.length === 0) {
      console.log('‚ö†Ô∏è  No SVG files found in src directory');
      return;
    }
    
    // Step 3: Convert SVGs to React components
    convertSvgFiles(svgFiles);
    
    // Step 4: Post-process components to fix styling issues
    console.log('üîß Post-processing components...');
    execSync('node scripts/post-process.js', { 
      cwd: rootDir,
      stdio: 'inherit'
    });
    
    // Step 5: Generate index file
    generateIndexFile();
    
    // Step 6: Generate TypeScript declarations
    generateTypes();
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log(`\nüéâ Build completed successfully in ${duration}s`);
    console.log(`üì¶ Generated ${svgFiles.length} icon components`);
    console.log(`üìÅ Output: ${distDir}`);
    
  } catch (error) {
    console.error('\n‚ùå Build failed:', error.message);
    process.exit(1);
  }
}

// Run build
build();